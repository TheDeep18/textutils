{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","role","htmlFor","TextForm","useState","text","setText","style","color","heading","cols","rows","backgroundColor","value","onChange","event","target","newText","toUpperCase","showAlert","toLowerCase","console","log","document","getElementById","select","navigator","clipboard","writeText","split","join","length","protoTypes","PropTypes","string","isRequired","aboutText","defaultProps","Alert","alert","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"0OAMe,SAASA,EAAOC,GA6B3B,OACI,qBAAKC,UAAS,yCAAoCD,EAAME,KAA1C,eAAqDF,EAAME,MAAzE,SACI,sBAAKD,UAAU,kBAAf,UAEI,mBAAGA,UAAS,4BAAsC,UAAfD,EAAME,KAAmB,OAAS,SAAWC,KAAK,IAArF,SAA0FH,EAAMI,QAEhG,wBAAQH,UAAU,iBAAiBI,KAAK,SAAS,iBAAe,WAAW,iBAAe,0BAA0B,gBAAc,yBAAyB,gBAAc,QAAQ,aAAW,oBAA5L,SACI,sBAAMJ,UAAU,0BAEpB,sBAAKA,UAAU,2BAA2BK,GAAG,yBAA7C,UACI,oBAAIL,UAAU,kCAAd,SACI,oBAAIA,UAAU,WAAd,SAEI,mBAAGA,UAAS,+BAAyC,UAAfD,EAAME,KAAmB,OAAS,SAAW,eAAa,OAAOC,KAAK,IAA5G,sBA4BR,sBAAKF,UAAS,sCAAgD,UAAfD,EAAME,KAAmB,OAAS,SAAjF,UACI,uBAAOD,UAAU,mBAAmBI,KAAK,WAAWE,QAASP,EAAMQ,WAAYC,KAAK,SAASH,GAAG,2BAChG,uBAAOL,UAAU,mBAAmBS,QAAQ,yBAA5C,yCCxET,SAASC,EAASX,GAC7B,IA4CA,EAAwBY,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAGA,OACI,qCACI,sBAAKb,UAAU,YAAYc,MAAO,CAAEC,MAAsB,SAAfhB,EAAME,KAAkB,QAAU,SAA7E,UACA,gCACI,6BAAKF,EAAMiB,UACP,0BAAUhB,UAAU,eAAeK,GAAG,QAAQY,KAAK,KAAKC,KAAK,KAAKJ,MAAO,CAAEK,gBAAgC,SAAfpB,EAAME,KAAkB,OAAS,QAASc,MAAuB,SAAfhB,EAAME,KAAkB,QAAU,SAAYmB,MAAOR,EAAMS,SAjClM,SAACC,GAEpBT,EAAQS,EAAMC,OAAOH,aAiCjB,wBAAQpB,UAAU,uBAAuBM,QAtD3B,WAElB,IAAIkB,EAAUZ,EAAKa,cACnBZ,EAAQW,GACRzB,EAAM2B,UAAU,8BAA+B,YAkD3C,kCACA,wBAAQ1B,UAAU,4BAA4BM,QAjD/B,WAEnB,IAAIkB,EAAUZ,EAAKe,cACnBd,EAAQW,GACRzB,EAAM2B,UAAU,8BAA+B,YA6C3C,kCACA,wBAAQ1B,UAAU,4BAA4BM,QA5C7B,WAGrBO,EADc,IAEdd,EAAM2B,UAAU,mBAAoB,YAwChC,mBACA,wBAAQ1B,UAAU,4BAA4BM,QA5BnC,WACfsB,QAAQC,IAAI,aACZ,IAAIjB,EAAOkB,SAASC,eAAe,SACnCnB,EAAKoB,SACLC,UAAUC,UAAUC,UAAUvB,EAAKQ,OACnCrB,EAAM2B,UAAU,2BAA4B,YAuBxC,uBACI,wBAAQ1B,UAAU,4BAA4BM,QApBhC,WACtB,IAAIkB,EAAUZ,EAAKwB,MAAM,QACzBvB,EAAQW,EAAQa,KAAK,MACrBtC,EAAM2B,UAAU,sBAAuB,YAiB/B,oCAGJ,sBAAK1B,UAAU,YAAYc,MAAO,CAAEC,MAAsB,SAAfhB,EAAME,KAAkB,QAAU,SAA7E,UACA,mDACA,8BAAIW,EAAKwB,MAAM,KAAKE,OAAS,EAA7B,cAA2C1B,EAAK0B,OAAhD,iBACA,8BAAK,MAAS1B,EAAKwB,MAAM,KAAKE,OAAS,GAAvC,mBACA,yCACA,4BAAI1B,EAAK0B,OAAO,EAAE1B,EAAK,uDDanCd,EAAOyC,WAAa,CAChBpC,MAAOqC,IAAUC,OAAOC,WACxBC,UAAWH,IAAUC,OAAOC,YAGhC5C,EAAO8C,aAAe,CAClBzC,MAAO,iBACPwC,UAAW,SE5EAE,MAff,SAAe9C,GAOX,OACIA,EAAM+C,OAAS,sBAAK9C,UAAS,sBAAiBD,EAAM+C,MAAM1C,KAA7B,gCAAiEI,KAAK,QAApF,UACX,iCAPW,SAACuC,GAChB,IAAMC,EAAQD,EAAKpB,cACnB,OAAOqB,EAAMC,OAAO,GAAGxB,cAAgBuB,EAAME,MAAM,GAKtCC,CAAWpD,EAAM+C,MAAM1C,QADrB,MACwCL,EAAM+C,MAAMM,QC0E5DC,MAxEf,WACE,MAAwB1C,mBAAS,SAAjC,mBAAOV,EAAP,KAAaqD,EAAb,KACA,EAA0B3C,mBAAS,MAAnC,mBAAOmC,EAAP,KAAcS,EAAd,KAEM7B,EAAY,SAAC8B,EAASpD,GAC1BmD,EAAS,CACPH,IAAKI,EACLpD,KAAMA,IAERqD,YAAW,WACTF,EAAS,QACR,OAmCL,OACE,qCAGI,cAACzD,EAAD,CAAQK,MAAM,YAAYI,WApCb,WACJ,UAATN,GACFqD,EAAQ,QACRxB,SAAS4B,KAAK5C,MAAMK,gBAAkB,UACtCW,SAAS3B,MAAQ,wBACjBuB,EAAU,oBAAqB,aAG/B4B,EAAQ,SACRxB,SAAS4B,KAAK5C,MAAMK,gBAAkB,QACtCW,SAAS3B,MAAQ,yBACjBuB,EAAU,qBAAsB,aAyBoBzB,KAAMA,IAGxD,cAAC,EAAD,CAAO6C,MAAOA,IACd,qBAAK9C,UAAU,iBAAf,SAKI,cAAEU,EAAF,CAAWM,QAAS,kCAAmCf,KAAMA,EAAOyB,UAAWA,UC5D5EiC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFxC,SAASC,eAAe,SAM1B4B,M","file":"static/js/main.304fcf0a.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\n\r\n\r\nexport default function Navbar(props) {\r\n    // const bgChangePrimary = () => {\r\n        \r\n    //     document.body.style.backgroundColor = \"#347deb\"\r\n    // }\r\n    // const bgChangeSecondary = () => {\r\n        \r\n    //     document.body.style.backgroundColor = \"#7d7273\"\r\n    // }\r\n    // const bgChangeSuccess = () => {\r\n        \r\n    //     document.body.style.backgroundColor = \"#33b025\"\r\n    // }\r\n    // const bgChangeDanger = () => {\r\n        \r\n    //     document.body.style.backgroundColor = \"#731017\"\r\n    // }\r\n    // const bgChangeWarning = () => {\r\n        \r\n    //     document.body.style.backgroundColor = \"#cedb14\"\r\n    // }\r\n    // const bgChangeInfo = () => {\r\n        \r\n    //     document.body.style.backgroundColor = \"#14dbd8\"\r\n    // }\r\n    // const bgChangeDark = () => {\r\n    //     document.body.style.backgroundColor = \"#20242b\"\r\n    // }\r\n    \r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                {/* <Link className={`navbar-brand text-${props.mode === 'light' ? 'dark' : 'light'}`} to=\"/textform\">{props.title}</Link> */}\r\n                <a className={`navbar-brand text-${props.mode === 'light' ? 'dark' : 'light'}`} href='#'>{props.title}</a>\r\n                {/* <a className={`navbar-brand text-dark`} href=\"/\">{props.title}</a> */}\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"/navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            {/* <Link className={`nav-link active text-${props.mode === 'light' ? 'dark' : 'light'}`} aria-current=\"page\" to=\"/textform\">Home</Link> */}\r\n                            <a className={`nav-link active text-${props.mode === 'light' ? 'dark' : 'light'}`} aria-current=\"page\" href=\"#\">Home</a>\r\n                        </li>\r\n                        {/*<li className=\"nav-item\">\r\n                            {/* <Link className={`nav-link text-${props.mode === 'light' ? 'dark' : 'light'}`} to=\"/about\">{props.aboutText}</Link> */}\r\n                            {/*<a className={`nav-link text-${props.mode === 'light' ? 'dark' : 'light'}`} href=\"#\">{props.aboutText}</a>\r\n                        </li> */}\r\n                        {/* <li className=\"nav-item\">\r\n                            <a className={`nav-link active text-dark`} aria-current=\"page\" href=\"/\">Home</a>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <a className={`nav-link text-dark`} href=\"/\">{props.aboutText}</a>\r\n                        </li> */}\r\n\r\n                    </ul>\r\n                    {/* <div className=\"colotBtn m-2\">\r\n                        <button type=\"button\" onClick={bgChangePrimary}  className={`btn btn-primary m-1 ${props.mode === 'primary' ? 'primary' : 'light'}`}></button>\r\n                        <button type=\"button\" onClick={bgChangeSecondary} className={`btn btn-secondary m-1 ${props.mode === 'secondary'}`}></button>\r\n                        <button type=\"button\" onClick={bgChangeSuccess} className={`btn btn-success m-1 ${props.mode === 'success'}`}></button>\r\n                        <button type=\"button\" onClick={bgChangeDanger} className={`btn btn-danger m-1 ${props.mode === 'danger'}`}></button>\r\n                        <button type=\"button\" onClick={bgChangeWarning} className={`btn btn-warning m-1 ${props.mode === 'warning'}`}></button>\r\n                        <button type=\"button\" onClick={bgChangeInfo} className={`btn btn-info m-1 ${props.mode === 'info'}`}></button>\r\n                        <button type=\"button\" onClick={bgChangeDark} className={`btn btn-dark m-1 ${props.mode === 'dark' ? 'light' : 'light'}`}></button>\r\n                    </div> */}\r\n\r\n                    {/* <form className=\"d-flex\">\r\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                        <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n                    </form> */}\r\n                    <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n                        <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark mode</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nNavbar.protoTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: 'Set title here',\r\n    aboutText: 'About'\r\n}","// import { cleanup } from '@testing-library/react';\r\nimport React, {useState} from 'react'\r\n// import App from '../App';\r\n\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = () => {\r\n        // console.log('Uppercase was clicked ' + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText) \r\n        props.showAlert(\"Text converted to uppercase\", \"success\")\r\n    }\r\n    const handleLowClick = () => {\r\n        // console.log('Uppercase was clicked ' + text);\r\n        let newText = text.toLowerCase();\r\n        setText(newText) \r\n        props.showAlert(\"Text converted to lowercase\", \"success\")\r\n    }\r\n    const handleClearClick = () => {\r\n        // console.log('Uppercase was clicked ' + text);\r\n        let newText = \"\";\r\n        setText(newText) \r\n        props.showAlert(\"Textarea cleared\", \"success\")\r\n    }\r\n\r\n    const handleOnChange = (event) => {\r\n        // console.log('Handleon change');\r\n        setText(event.target.value)  \r\n    }\r\n\r\n    // const onClear = () => {\r\n    //     // console.log('Textarea was clicked');\r\n    //     setText(\"\")\r\n    // }\r\n\r\n    const handlecopy = () => {\r\n        console.log('I am copy');\r\n        var text = document.getElementById(\"myBox\")\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Text copied to clipboard\", \"success\")\r\n        \r\n    }\r\n\r\n    const handleExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"))\r\n        props.showAlert(\"Extra space removed\", \"success\")\r\n    }\r\n\r\n    const [text, setText] = useState('');\r\n    // text = \"afafadfd\" // wrong way to change the state \r\n    // setText(\"sfsfdfsf\"); // right way to change the state\r\n    return (\r\n        <>\r\n            <div className=\"container\" style={{ color: props.mode === 'dark' ? 'white' : 'black' }}>\r\n            <div>\r\n                <h1>{props.heading}</h1>\r\n                    <textarea className=\"form-control\" id=\"myBox\" cols=\"30\" rows=\"10\" style={{ backgroundColor: props.mode === 'dark' ? 'grey' : 'white', color:  props.mode === 'dark' ? 'white' : 'black'  }} value={text} onChange={handleOnChange}></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary my-3\" onClick={handleUpClick}>Convert to uppercase</button>\r\n            <button className=\"btn btn-primary my-3 mx-2\" onClick={handleLowClick}>Convert to lowercase</button>\r\n            <button className=\"btn btn-primary my-3 mx-2\" onClick={handleClearClick}>Clear</button>\r\n            <button className=\"btn btn-primary my-3 mx-2\" onClick={handlecopy}>Copy text</button>\r\n                <button className=\"btn btn-primary my-3 mx-2\" onClick={handleExtraSpaces}>Remove extra spaces</button>\r\n        </div>\r\n\r\n            <div className=\"container\" style={{ color: props.mode === 'dark' ? 'white' : 'black' }}>\r\n            <h2>Your text summary</h2>\r\n            <p>{text.split(\" \").length - 1} words and {text.length} characters</p>\r\n            <p>{(0.008 * (text.split(\" \").length - 1))} Minutes read</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:\"Enter text in the textarea to preview here..\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\r\n\r\nfunction Alert(props) {\r\n\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase()\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1)\r\n        \r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Alert;\r\n\r\n","import './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route,\n// } from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState('light'); //whether dark mode is enables or not\n  const [alert, setAlert] = useState(null);\n  // const [bg, setBg] = useState(null);\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 1500);\n\n  }\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\")\n      document.body.style.backgroundColor = \"#8a1a25\"\n      document.title = 'TextUtils - Dark Mode'\n      showAlert(\"Enabled dark mode\", \"success\")\n\n    } else {\n      setMode(\"light\")\n      document.body.style.backgroundColor = \"white\"\n      document.title = 'TextUtils - Light Mode'\n      showAlert(\"Enabled light mode\", \"success\")\n    }\n\n\n  }\n  // const bgChange = (event) => {\n  //   if (mode === \"primary\") {\n  //     setMode(\"primary\")\n  //     document.body.style.backgroundColor = \"primary\"\n  //     showAlert(\"Enabled dark mode\", \"success\")\n  //     console.log(\"primary was clicked\");\n\n  //   }\n  //   else if (mode === \"success\") {\n  //     setMode(\"success\")\n  //     document.body.style.backgroundColor = \"success\"\n  //     showAlert(\"Enabled dark mode\", \"success\")\n\n  //   }\n  // }\n\n  return (\n    <>\n      {/* <Router> */}\n        {/* <Navbar title = \"Textutils\" aboutText = \"About Textutils\"/> */}\n        <Navbar title=\"Textutils\" toggleMode={toggleMode} mode={mode} /*bgChange={bgChange}*/ />\n        {/* <Navbar/> */}\n\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n          {/* <Routes>\n            <Route path=\"/about\" element = {<About/>} />\n            <Route path=\"/textform\" element={< TextForm heading={\"Enter The Text To Analyse Below\"} mode={mode} showAlert={showAlert} />} */}\n            \n            < TextForm heading={\"Enter The Text To Analyse Below\"} mode={mode}  showAlert={showAlert} />\n          \n              \n            {/* /> */}\n          {/* </Routes> */}\n        </div>\n      {/* </Router> */}\n\n\n    </>\n  );\n}\n\nexport default App;\n\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}